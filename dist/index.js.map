{"version":3,"sources":["../index.js"],"names":["app","require","server","Server","io","redis","redisClient","createClient","redisSocket","adapter","host","port","bodyParser","use","urlencoded","extended","engine","__express","set","__dirname","Datastore","datastore","projectId","keyFilename","nicknameOfServer","get","req","res","sendFile","post","console","log","body","render","authInfo","fromDatastore","obj","id","KEY","sendMessage","message","save","key","data","getUserOfMessage","userId","query","createQuery","select","filter","runQuery","then","entity","getUserOfMessages","userKeys","entities","map","getUserForMessageById","result","getMessages","roomName","limit","order","getMessage","messageInfo","room_name","descending","getMessageById","messageId","patchEditedMessage","update","catch","error","patchReactionOfMessage","deleteMessage","delete","on","socket","enterInfo","convertRoomName","join","hvals","err","cnt","hset","reply","container","pastMessages","tempUserKeys","forEach","element","parseInt","from","push","usersInfo","messageElement","messageIndex","userElement","userIndex","tempUser","address","first_name","last_name","name","image","emit","created_at","Date","getTime","updated_at","reactions","user","sockets","to","editMessageInfo","tempMessage","status","Error","deleteMessageInfo","info","type","discription","reactionInfo","tempReactions","isEmoji","index","emoji","reaction","patchResult","temp","sort","listen"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nconst app = require('express')();\nconst server = require('http').Server(app);\nconst io = require('socket.io')(server);\nconst redis = require('redis');\nconst redisClient = redis.createClient(6379, '35.185.172.137');\n\nconst redisSocket = require('socket.io-redis');\nio.adapter(redisSocket({ host: '35.185.172.137', port: 6379 }));\n\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser());\napp.use(bodyParser.urlencoded({extended: true}));\n\napp.engine('.html', require('ejs').__express);\napp.set('views', __dirname + '/views');\napp.set('view engine', 'html');\n\n// set datastore\nconst Datastore = require('@google-cloud/datastore');\nconst datastore = Datastore({\n    projectId: \"cyberagent-127\",\n    keyFilename: './path/keyfile.json'\n});\n\nconst nicknameOfServer = \"socketServer_01\";\n\n/*\n    REST API start\n                    */\n\napp.get('/', function(req, res){\n    res.sendFile(__dirname + '/views/start_chatting.html');\n});\n\napp.post('/message', function(req, res) {\n    console.log(req.body);\n    //res.sendFile(__dirname + '/views/index.html', {authInfo: req.body});\n    res.render('index', {\n        authInfo: req.body\n    });\n});\n\n                    /*\n    REST API end\n*/\n\nfunction fromDatastore(obj) {\n  obj.id = obj[Datastore.KEY].id;\n  return obj;\n}\n\nfunction sendMessage(message) {\n  return datastore.save({\n      key: datastore.key('Messages'),\n      data: message\n  });\n}\n\nfunction getUserOfMessage(userId) {\n    const key = datastore.key([\"Users\", userId]);\n    const query = datastore.createQuery('Users')\n        .select([\"address\", \"first_name\", \"last_name\", \"name\", \"image\"])\n        .filter(\"__key__\", \"=\", key);\n\n    return datastore.runQuery(query)\n        .then((data) => {\n            const entity = data[0];\n            return entity;\n        });\n}\n\nfunction getUserOfMessages(userKeys) {\n    return datastore.get(userKeys)\n        .then((data) => {\n            const entities = data[0];\n            entities.map(fromDatastore);\n            return entities;\n        });\n}\n\nfunction getUserForMessageById(userId) {\n    const key = datastore.key(['Users', userId]);\n    const query = datastore.createQuery('Users')\n                    .select(['address', 'first_name', 'last_name', 'name', 'image'])\n                    .filter('__key__', '=', key);\n\n    return datastore.runQuery(query)\n        .then((result) => {\n            console.log(result);\n            return result;\n        });\n\n    /*\n    const key = datastore.key(['Users', userId]);\n    const query = datastore.createQuery('Users')\n        .select(['address', 'first_name', 'last_name', 'name', 'image'])\n        .filter('__key__', '=', key);\n\n    return datastore.runQuery(query)\n        .then((result) => {\n            return result[0];\n        });\n        */\n}\n\nfunction getMessages(roomName, limit) {\n    const query = datastore.createQuery('Messages')\n        .filter('room_name', '=', roomName)\n        .order('created_at')\n        .limit(limit);\n\n    return datastore.runQuery(query)\n        .then((data) => {\n            const entities = data[0];\n            entities.map(fromDatastore);\n            return entities;\n        });\n}\n\nfunction getMessage(messageInfo) {\n    const query = datastore.createQuery('Messages')\n        .filter(\"room_name\", \"=\", messageInfo.room_name)\n        .order(\"created_at\", {\n            descending: true\n        })\n        .limit(1);\n\n    return datastore.runQuery(query)\n        .then((result) => {\n        const entity = result[0];\n        entity.map(fromDatastore);\n        console.log(entity);\n        return entity;\n    });\n}\n\nfunction getMessageById(messageId) {\n    const key = datastore.key([\"Messages\", messageId]);\n    const query = datastore.createQuery('Messages')\n        .filter(\"__key__\", \"=\", key);\n\n    return datastore.runQuery(query)\n        .then((result) => {\n            return result[0];\n        });\n}\n\n/*\n    patch start\n                */\n\nfunction patchEditedMessage(messageId, messageInfo) {\n    const entity = {\n        key: datastore.key(['Messages', messageId]),\n        data: messageInfo\n    };\n\n    return datastore.update(entity)\n        .then(() => {\n            return true;\n        }).catch((error) => {\n            return false;\n        });\n}\n\nfunction patchReactionOfMessage(messageId, messageInfo) {\n    const entity = {\n        key: datastore.key(['Messages', messageId]),\n        data: messageInfo\n    };\n\n    return datastore.update(entity)\n        .then(() => {\n            return true;\n        }).catch((error) => {\n            return false;\n        });\n}\n\n                /*\n    patch end\n*/\n\n/*\n    delete start\n                */\n\nfunction deleteMessage(messageId) {\n    const key = datastore.key(['Messages', messageId]);\n\n    return datastore.delete(key)\n        .then(() => {\n            return true;\n        }).catch((error) => {\n            return false;\n        });\n}\n\n                /*\n    delete end\n*/\n\n/*\n    socket start\n                */\n\nio.on('connection', function(socket){\n  console.log(\"On Connection\");\n\n  // enter the channel\n  /*\n    const enterInfo = {\n        type: 0,\n        from: 1234,\n        to: 4321,\n    }\n  */\n\n  socket.on(\"enter:room\", function(enterInfo) {\n    const roomName = convertRoomName(enterInfo);\n    socket.join(roomName);\n\n    redisClient.hvals(nicknameOfServer, function(err, data) {\n        const cnt = ++data[1];\n        console.log(cnt);\n\n        redisClient.hset(nicknameOfServer, \"cnt\", cnt, function(err, reply) {\n            console.log(reply);\n            if(!err) {\n                if(reply === 0) {\n                    console.log('success');\n                } else {\n                    console.log('failed');\n                }\n            } else {\n                console.log('error : ', err);\n            }\n        });\n    });\n\n    let container = {};\n    getMessages(roomName, 20)\n        .then((pastMessages) => {\n            container = pastMessages;\n\n            let tempUserKeys = [];\n            container.forEach(function (element) {\n                let userId = parseInt(element.from);\n                console.log(userId);\n                tempUserKeys.push(datastore.key(['Users', userId]));\n            });\n\n            return getUserOfMessages(tempUserKeys);\n        })\n        .then((usersInfo) => {\n            container.forEach(function(messageElement, messageIndex) {\n                usersInfo.forEach(function(userElement, userIndex) {\n                    let userId = parseInt(messageElement.from);\n\n                    if(userId == userElement.id) {\n                        let tempUser = {\n                            id: userElement.id,\n                            address: userElement.address,\n                            first_name: userElement.first_name,\n                            last_name: userElement.last_name,\n                            name: userElement.name,\n                            image: userElement.image\n                        };\n\n                        container[messageIndex].from = tempUser;\n\n                        return true;\n                    }\n                });\n            });\n\n            socket.emit(\"enter:room\", container);\n        });\n  });\n\n  // chatting in channel\n  /*\n    const messageInfo = {d\n        type: 0,\n        from: 1234,\n        to: 4321,\n        body: $('#m').val()\n    };\n  */\n\n  socket.on(\"chat:room\", function(messageInfo){\n    const roomName = convertRoomName(messageInfo);\n\n    messageInfo.created_at = new Date().getTime();\n    messageInfo.updated_at = new Date().getTime();\n    messageInfo.room_name = roomName;\n    messageInfo.reactions = \"\";\n    console.log(\"273 :\", messageInfo);\n\n    let container = {};\n    const userId = parseInt(messageInfo.from);\n    console.log(typeof userId);\n\n    sendMessage(messageInfo)\n        .then(() => {\n            return getMessage(messageInfo);\n        })\n        .then((message) => {\n            container = message[0];\n            const userId = parseInt(message[0].from);\n\n            return getUserOfMessage(userId);\n        }).then((user) => {\n            console.log(user);\n            let tempUser = {\n                id: userId,\n                address: user[0].address,\n                first_name: user[0].first_name,\n                last_name: user[0].last_name,\n                name: user[0].name,\n                image: user[0].image\n            };\n\n            container.from = tempUser;\n\n            io.sockets.to(messageInfo.room_name).emit(\"chat:room\", container);\n        });\n  });\n\n  // edit message\n  /*\n     const editMessageInfo = {\n        id: 5072999279493120,\n        body: \"Hello\"\n     };\n  */\n\n  socket.on(\"chat:room:edit\", function(editMessageInfo) {\n      const messageId = parseInt(editMessageInfo.id);\n\n      let container = {};\n      let tempMessage = {};\n      getMessageById(messageId)\n          .then((message) => {\n                tempMessage = message[0];\n                tempMessage.body = editMessageInfo.body;\n                tempMessage.updated_at = new Date().getTime();\n\n                return patchEditedMessage(messageId, tempMessage);\n          }).then((result) => {\n                console.log(result);\n                if(result) {\n                    // success edit message\n                    return getUserOfMessage(parseInt(tempMessage.from));\n                } else {\n                    // failed edit message\n                    container.status = \"error\";\n                    container.message = \"\";\n\n                    io.sockets.to(tempMessage.room_name).emit(\"chat:room:edit\", container);\n\n                    throw new Error('falied edited message!');\n                }\n          }).then((user) => {\n                container.status = \"success\";\n\n                user[0].id = parseInt(tempMessage.from);\n                tempMessage.from = user[0];\n\n                tempMessage.id = messageId;\n                container.message = tempMessage;\n\n                console.log(container);\n\n                io.sockets.to(tempMessage.room_name).emit(\"chat:room:edit\", container);\n\n          }).catch((err) => {\n                console.log(err);\n          });\n  });\n\n  // delete message\n  /*\n     const deleteMessageInfo = {\n        id: 5072999279493120,\n        body: \"Hello\"\n     };\n  */\n\n  socket.on(\"chat:room:delete\", function(deleteMessageInfo) {\n      let container = {};\n\n      const info = {\n          type: deleteMessageInfo.type,\n          to: deleteMessageInfo.to,\n          from: deleteMessageInfo.from\n      };\n\n      const roomName = convertRoomName(info);\n\n      const messageId = parseInt(deleteMessageInfo.id);\n      deleteMessage(messageId)\n          .then((result) => {\n              if(result) {\n                  // success delete message\n                  container.status = \"success\";\n                  container.id = deleteMessageInfo.id;\n\n                  io.sockets.to(roomName).emit(\"chat:room:delete\", container);\n              } else {\n                  // failed delete message\n                  container.status = \"error\";\n                  container.discription = \"fuck\";\n\n                  io.sockets.to(roomName).emit(\"chat:room:delete\", container);\n              }\n          });\n  });\n\n\n  // reaction in channel\n  /*\n      const reactionInfo = {\n        id: 5072999279493120,\n        from: 1,\n        emoji: 1\n    };\n  */\n\n  socket.on(\"chat:room:reaction\", function(reactionInfo) {\n      let container = {};\n      let tempMessage = {};\n      let tempReactions = [];\n\n      // search message entity\n      getMessageById(reactionInfo.id)\n          .then((message) => {\n          tempMessage = message[0];\n\n          // search reaction in message\n          let isEmoji = false;\n\n          if(message[0].reactions) {\n              tempReactions = message[0].reactions;\n              tempReactions.forEach(function(element, index) {\n                  if(element.from == reactionInfo.from && element.emoji == reactionInfo.emoji) {\n                      delete tempReactions[index];\n                      isEmoji = true;\n                  }\n              });\n          }\n\n          return isEmoji;\n\n          }).then((result) => {\n          if(!result) {\n              // not exist emoji\n              const reaction = {\n                  from: reactionInfo.from,\n                  emoji: reactionInfo.emoji\n              };\n\n              tempReactions.push(reaction);\n          }\n\n          console.log(\"351: \", tempReactions);\n          tempMessage.reactions = tempReactions;\n\n          return patchReactionOfMessage(reactionInfo.id, tempMessage);\n\n          }).then((patchResult) => {\n\n          if(patchResult) {\n              // success update reaction\n              return getMessageById(reactionInfo.id)\n          } else {\n              // failed update reaction\n              container.status = \"failed\";\n              container.message = \"\";\n\n              throw new Error('falied update reaction!');\n          }\n\n          }).then((message) => {\n\n          const userId = parseInt(tempMessage.from);\n\n          return getUserForMessageById(userId);\n          }).then((user) => {\n          user[0].id = parseInt(tempMessage.from);\n\n          tempMessage.from = user[0];\n          tempMessage.id = reactionInfo.id;\n\n          container.status = \"success\";\n          container.message = tempMessage;\n          console.log(container);\n\n          io.sockets.to(tempMessage.room_name).emit(\"chat:room:reaction\", container);\n\n      }).catch((err) => {\n          console.log(err);\n      });\n  });\n\n  socket.on('disconnect', function () {\n      redisClient.hvals(nicknameOfServer, function(err, data) {\n          const cnt = --data[1];\n          console.log(cnt);\n\n          redisClient.hset(nicknameOfServer, \"cnt\", cnt, function(err, reply) {\n              console.log(reply);\n              if(!err) {\n                  if(reply === 0) {\n                      console.log('success');\n                  } else {\n                      console.log('failed');\n                  }\n              } else {\n                  console.log('error : ', err);\n              }\n          });\n      });\n  });\n});\n\n/*\n    socket end\n                */\n\n/*\n    other libraries\n                    */\n\nfunction convertRoomName(info) {\n  let roomName = \"\";\n\n  if(info.type == 0) {\n      // in channel\n      roomName = info.type + \"@\" + info.to;\n  } else {\n      // in DM\n      let temp = [info.from, info.to];\n      temp.sort();\n      roomName = info.type + \"@\" + temp[0] + \"_\" + temp[1];\n  }\n\n  return roomName;\n}\n\nserver.listen(3000);"]}